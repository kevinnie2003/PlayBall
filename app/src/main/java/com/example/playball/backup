package com.example.playball;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Handler;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SeekBar;

public class MainActivity extends Activity implements SensorEventListener {
    private BallView ballView;
    private SharedPreferences prefs;
    private SensorManager sensorManager;
    private boolean isGravityMode = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        prefs = getSharedPreferences("BallPrefs", MODE_PRIVATE);
        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);

        RelativeLayout layout = new RelativeLayout(this);
        ballView = new BallView(this, prefs);
        layout.addView(ballView, new RelativeLayout.LayoutParams(
                RelativeLayout.LayoutParams.MATCH_PARENT,
                RelativeLayout.LayoutParams.MATCH_PARENT));

        Button settingsButton = new Button(this);
        settingsButton.setText("设置");
        RelativeLayout.LayoutParams buttonParams = new RelativeLayout.LayoutParams(
                RelativeLayout.LayoutParams.WRAP_CONTENT,
                RelativeLayout.LayoutParams.WRAP_CONTENT);
        buttonParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        buttonParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
        settingsButton.setLayoutParams(buttonParams);
        settingsButton.setOnClickListener(v -> showSettingsDialog());
        layout.addView(settingsButton);

        setContentView(layout);
    }

    @Override
    protected void onResume() {
        super.onResume();
        Sensor accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_GAME);
    }

    @Override
    protected void onPause() {
        super.onPause();
        sensorManager.unregisterListener(this);
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        if (isGravityMode) {
            float x = event.values[0];
            float y = event.values[1];
            ballView.updatePosition(-x, y);
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
        // Not used
    }

    private void showSettingsDialog() {
        // Settings dialog implementation including the gravity mode toggle
        LinearLayout layout = new LinearLayout(this);
        layout.setOrientation(LinearLayout.VERTICAL);

        final SeekBar sizeSeekBar = new SeekBar(this);
        sizeSeekBar.setMax(200);
        sizeSeekBar.setProgress(ballView.getBallRadius());
        layout.addView(sizeSeekBar);

        final String[] colors = {"红色", "蓝色", "绿色", "黄色"};
        final int[] colorValues = {Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW};

        Button colorButton = new Button(this);
        colorButton.setText("选择颜色");
        colorButton.setOnClickListener(v -> {
            new AlertDialog.Builder(this)
                    .setTitle("选择颜色")
                    .setItems(colors, (dialog, which) -> {
                        ballView.setBallColor(colorValues[which]);
                        saveSettings(ballView.getBallRadius(), colorValues[which]);
                    })
                    .show();
        });
        layout.addView(colorButton);

        Button toggleModeButton = new Button(this);
        toggleModeButton.setText(isGravityMode ? "切换为触控模式" : "切换为重力模式");
        toggleModeButton.setOnClickListener(v -> {
            isGravityMode = !isGravityMode;
            toggleModeButton.setText(isGravityMode ? "切换为触控模式" : "切换为重力模式");
            ballView.setGravityMode(isGravityMode);
        });
        layout.addView(toggleModeButton);

        new AlertDialog.Builder(this)
                .setTitle("调整大小")
                .setView(layout)
                .setPositiveButton("确定", (dialog, which) -> {
                    int newSize = sizeSeekBar.getProgress();
                    ballView.setBallRadius(newSize);
                    saveSettings(newSize, ballView.getBallColor());
                })
                .setNegativeButton("取消", (dialog, which) -> dialog.dismiss())
                .show();
    }

    private void saveSettings(int ballSize, int ballColor) {
        SharedPreferences.Editor editor = prefs.edit();
        editor.putInt("BallSize", ballSize);
        editor.putInt("BallColor", ballColor);
        editor.putBoolean("GravityMode", isGravityMode);
        editor.apply();
    }

    private void saveGameMode(boolean followTouch) {
        SharedPreferences.Editor editor = prefs.edit();
        editor.putBoolean("GameMode", followTouch);
        editor.apply();
    }

    class BallView extends View {
        private SharedPreferences prefs;
        public boolean followTouch = true;
        private float x = 500, y = 500; // Default position
        private int ballRadius = 100; // Default radius
        private int ballColor = Color.BLUE; // Default color
        private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);

        public BallView(Context context, SharedPreferences prefs) {
            super(context);
            this.prefs = prefs;
            loadSettings(); // Load settings including the gravity mode state
        }

        private void loadSettings() {
            this.ballRadius = prefs.getInt("BallSize", 100);
            this.ballColor = prefs.getInt("BallColor", Color.BLUE);
            this.followTouch = !prefs.getBoolean("GravityMode", false); // Use the opposite value since default is true
            this.x = prefs.getFloat("BallX", 500);
            this.y = prefs.getFloat("BallY", 500);
            paint.setColor(ballColor);
        }

        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            canvas.drawCircle(x, y, ballRadius, paint);
        }

        @Override
        public boolean onTouchEvent(MotionEvent event) {
            if (followTouch) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                    case MotionEvent.ACTION_MOVE:
                    case MotionEvent.ACTION_UP:
                        x = event.getX();
                        y = event.getY();
                        saveBallPosition();
                        invalidate();
                        return true;
                }
            }
            return super.onTouchEvent(event);
        }

        public void updatePosition(float xAccel, float yAccel) {
            if (!followTouch) {
                // Update ball position based on accelerometer data
                x += xAccel * 2; // Multiplier for adjusting sensitivity
                y += yAccel * 2;
                // Ensure the ball stays within the view
                x = Math.max(ballRadius, Math.min(x, getWidth() - ballRadius));
                y = Math.max(ballRadius, Math.min(y, getHeight() - ballRadius));
                saveBallPosition();
                invalidate();
            }
        }

        public void setGravityMode(boolean enabled) {
            this.followTouch = !enabled;
        }

        private void saveBallPosition() {
            SharedPreferences.Editor editor = prefs.edit();
            editor.putFloat("BallX", x);
            editor.putFloat("BallY", y);
            editor.apply();
        }

        public int getBallRadius() {
            return ballRadius;
        }

        public void setBallRadius(int ballRadius) {
            this.ballRadius = ballRadius;
            invalidate(); // Redraw with the new settings
        }

        public int getBallColor() {
            return ballColor;
        }

        public void setBallColor(int ballColor) {
            this.ballColor = ballColor;
            paint.setColor(ballColor);
            invalidate(); // Redraw with the new settings
        }
    }

}
